#!/bin/bash

# Fail immediately on non-zero exit code.
set -e
# Fail immediately on non-zero exit code within a pipeline.
set -o pipefail
# Fail on undeclared variables.
set -u
# Debug, echo every command
#set -x

export_env_dir() {
  local env_dir=$1
  local whitelist_regex=${2:-''}
  local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|IFS)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

# parse and derive params
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# Load the env for build. Note:
# * all `PIO_*` variables
# * `DATABASE_URL` supports PIO 0.10 and earlier's engine registration,
#   it is no longer required as of 0.11
export_env_dir "$ENV_DIR" '^(PIO_\w+|DATABASE_URL)$'
export_env_dir "$ENV_DIR" '^PREDICTIONIO_DIST_URL$'

source ./bin/common/setup-runtime "$BUILD_DIR" "$BP_DIR"

if [ -d "$BP_DIR/repo" ]
  then
  echo "+ local Maven repo from buildpack (build.sbt entry)" | indent
  (echo && \
    echo '// Search for packages provided by predictionio-buildpack' && \
    echo 'resolvers += "Local Repository" at "file://"+baseDirectory.value+"/repo"') >> $BUILD_DIR/build.sbt
fi

echo "Set-up environment via '.profile.d/' scripts" | indent
mkdir -p "$BUILD_DIR/.profile.d"
cp -r $BP_DIR/.profile.d/* "$BUILD_DIR/.profile.d/" | indent

topic "Install JVM (heroku/jvm-common)"
# Method from https://elements.heroku.com/buildpacks/heroku/heroku-buildpack-jvm-common
set +u # allowed undeclared vars

# download the buildpack
JVM_COMMON_BUILDPACK=${JVM_COMMON_BUILDPACK:-https://codon-buildpacks.s3.amazonaws.com/buildpacks/heroku/jvm-common.tgz}
mkdir -p /tmp/jvm-common
curl --silent --location $JVM_COMMON_BUILDPACK | tar xzm -C /tmp/jvm-common --strip-components=1
. /tmp/jvm-common/bin/util
. /tmp/jvm-common/bin/java

# install JDK
javaVersion=$(detect_java_version ${BUILD_DIR})
install_java ${BUILD_DIR} ${javaVersion}

set -u # reset to not allow undeclared vars

if [ -f "${BUILD_DIR}/engine.json" ]
then
  topic "PredictionIO engine"

  cd $BUILD_DIR
  if [ "${PIO_VERBOSE:-}" = "true" ]
  then
    $PIO_DIST_NAME/bin/pio build --verbose | indent
  else
    echo 'Quietly logging. (Set `PIO_VERBOSE=true` for detailed build log.)' | indent
    $PIO_DIST_NAME/bin/pio build | indent
  fi

  # Try to keep slug below 500MB limit.
  # This is based on profiling with
  # `du -a "${BUILD_DIR}" | sort -n -r | head -n 50`
  # and removing big objects that seem unnecessary.
  rm -rf "target/streams" || true

  # Move executables for Procfile into place
  mkdir -p $BUILD_DIR/bin
  cp $BP_DIR/bin/engine/heroku-* $BUILD_DIR/bin/

  if [ -f "${BUILD_DIR}/Procfile" ]
  then
    echo "Using custom Procfile" | indent
  elif [ "${PIO_RUN_AS_EVENTSERVER:-false}" = "true" ]
  then
    echo "Using eventserver Procfile" | indent
    cp "${BP_DIR}/Procfile-eventserver" "${BUILD_DIR}/Procfile"
  else
    echo "Using default Procfile for engine" | indent
    cp "${BP_DIR}/Procfile-engine" "${BUILD_DIR}/Procfile"
  fi

# The eventserver is built directly by the Scala buildpack.
# (heroku/scala must be the last buildpack defined for the app)
else
  echo '`pio` CLI is installed. No engine to build. (`engine.json` does not exist.)' | indent
fi