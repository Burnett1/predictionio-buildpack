#!/bin/bash

# Fail immediately on non-zero exit code.
set -e
# Fail immediately on non-zero exit code within a pipeline.
set -o pipefail
# Fail on undeclared variables.
set -u
# Debug, echo every command
#set -x

# parse and derive params
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# Load the env for build. Note:
# * all `PIO_*` variables
# * `DATABASE_URL` supports PIO 0.10 and earlier's engine registration,
#   it is no longer required as of 0.11
export_env_dir "$ENV_DIR" '^(PIO_\w+|DATABASE_URL)$'
export_env_dir "$ENV_DIR" '^PREDICTIONIO_DIST_URL$'

source ./common/setup-runtime "$BUILD_DIR" "$BP_DIR"

echo "Set-up environment via '.profile.d/' scripts" | indent
mkdir -p "$BUILD_DIR/.profile.d"
cp -r $BP_DIR/.profile.d/* "$BUILD_DIR/.profile.d/" | indent

if [ -f "${BUILD_DIR}/engine.json" ]
then
  topic "PredictionIO engine"

  # Build with dyno runtime-compatible prefix.
  # The PATH set in .profile.d/pio-env.sh must match.
  # (`pio build` ends up capturing its absolute build path, so it needs
  # to align with the actual runtime.)
  app_namespace="pio-engine"
  app_prefix="/app/${app_namespace}"
  echo "Building at $app_prefix" | indent
  STAGE_THE_BUILD=$CACHE_DIR/app-prefix-stage
  mkdir -p $STAGE_THE_BUILD
  mv $BUILD_DIR/* $STAGE_THE_BUILD/
  mkdir -p $app_prefix
  mv $STAGE_THE_BUILD/* $app_prefix/
  rm -rf $STAGE_THE_BUILD
  cd $app_prefix

  if [ "${PIO_VERBOSE:-}" = "true" ]
  then
    $PIO_DIST_NAME/bin/pio build --verbose | indent
  else
    echo 'Quietly logging. (Set `PIO_VERBOSE=true` for detailed build log.)' | indent
    $PIO_DIST_NAME/bin/pio build | indent
  fi

  echo "Clean-up build artifacts" | indent
  # Try to keep slug below 300MB limit.
  # This is based on profiling with
  # `du -a "${BUILD_DIR}" | sort -n -r | head -n 50`
  # and removing big objects that seem unnecessary.
  rm -rf "target/streams" || true

  echo "Making engine available in runtime at /app/pio-engine/" | indent
  # After PIO build at the runtime prefix, move the engine into the slug
  mv $app_prefix $BUILD_DIR || true
  # Move the Procfile(s) back to the top-level app directory or use default for engines
  # (`bin/release` default_process_types have no effect since this is never the last buildpack)
  if [ -f "${BUILD_DIR}/${app_namespace}/Procfile" ]
  then
    echo "Using custom Procfile" | indent
    mv $BUILD_DIR/$app_namespace/Procfile* $BUILD_DIR
  else
    echo "Using default Procfile for engine" | indent
    cp "${BP_DIR}/Procfile-engine" "${BUILD_DIR}/Procfile"
  fi

  echo "Making Procfile executables available in /app/bin/" | indent
  mkdir -p $BUILD_DIR/bin
  cp $BP_DIR/bin/engine/heroku-* $BUILD_DIR/bin/
  # This supports composition with other buildpacks which might expect 
  # bin/ & conf/ directories to stay in app/.
  if [ -d "$BUILD_DIR/$app_namespace/bin" ]
    then
    mv $BUILD_DIR/$app_namespace/bin/* $BUILD_DIR/bin/
  fi
  if [ -d "$BUILD_DIR/$app_namespace/conf" ]
    then
    mv $BUILD_DIR/$app_namespace/conf/* $BUILD_DIR/conf/
  fi

# The eventserver is built directly by the Scala buildpack.
# (heroku/scala must be the last buildpack defined for the app)
else
  echo '`pio` CLI is installed. No engine to build. (`engine.json` does not exist.)' | indent
fi